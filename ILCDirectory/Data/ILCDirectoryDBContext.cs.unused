using System;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

using ILCDirectory.Models;

namespace ILCDirectory.Data
{
    public class ILCDirectoryDBContext //: IdentityDbContext
    {
        private readonly IConfiguration _configuration;
        public ILCDirectoryDBContext(IConfiguration configuration) : base()
        {
            _configuration = configuration;
        }
        public ILCDirectoryDBContext(DbContextOptions<ILCDirectoryDBContext> options, IConfiguration configuration)
            : base(options)
        {
            _configuration = configuration;
        }

        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<DtProperty> DtProperties { get; set; }
        //public virtual DbSet<ExportCnasAddress> ExportCnasAddresses { get; set; }
        //public virtual DbSet<NotesChild> NotesChildren { get; set; }
        //public virtual DbSet<NotesCnas> NotesCnas { get; set; }
        //public virtual DbSet<NotesPerson> NotesPerson { get; set; }
        //public virtual DbSet<NotesRegistration> NotesRegistrations { get; set; }
        public virtual DbSet<Person> People { get; set; }

/*        public virtual DbSet<QryDirectoryCorrection> QryDirectoryCorrection { get; set; }
        public virtual DbSet<QryDirectoryCorrectionOldDirDisplay> QryDirectoryCorrectionOldDirDisplay { get; set; }
        public virtual DbSet<QryEmailList> QryEmailList { get; set; }
        public virtual DbSet<QryLookUpAddress> QryLookUpAddress { get; set; }
        public virtual DbSet<QryLookUpPerson> QryLookUpPerson { get; set; }
        public virtual DbSet<QryLookUpPersonOld> QryLookUpPersonOld { get; set; }
        public virtual DbSet<QryLookUpPersonOlder> QryLookUpPersonOlder { get; set; }
        public virtual DbSet<QryLookUpWorkGroups> QryLookUpWorkGroups { get; set; }
        public virtual DbSet<QryNameDept> QryNameDept { get; set; }
        public virtual DbSet<QryPeopleCurrentlyLocal> QryPeopleCurrentlyLocal { get; set; }
        public virtual DbSet<QryReturnedDirCorrForm> QryReturnedDirCorrForm { get; set; }*/
        public virtual DbSet<Building> Buildings { get; set; }
        public virtual DbSet<CityCode> CityCodes { get; set; }
        public virtual DbSet<Classification> Classification { get; set; }
        //public virtual DbSet<DeletedPerson> DeletedPerson { get; set; }
        public virtual DbSet<MailDelivery> MailDelivery { get; set; }
        //public virtual DbSet<MaritalStatus> MaritalStatus { get; set; }
        public virtual DbSet<OtherMail> OtherMail { get; set; }
        public virtual DbSet<PurposeOfVisit> PurposeOfVisit { get; set; }
        //public virtual DbSet<Suffix> Suffix { get; set; }
        public virtual DbSet<TimeFrame> TimeFrame { get; set; }
        public virtual DbSet<Title> Title { get; set; }
        public virtual DbSet<Vehicle> Vehicle { get; set; }
        public virtual DbSet<Wo> Wos { get; set; }
        public virtual DbSet<Workgroup> Workgroups { get; set; }
        public virtual DbSet<ViewPersonDisplayName> ViewPersonDisplayName { get; set; }
        //public virtual DbSet<WorkgroupsOld> WorkgroupsOld { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(_configuration["ILCDirectory:ConnectionString"]);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Address>(entity =>
            {
                entity.Property(e => e.AuditTrail).IsUnicode(false);
            });

            modelBuilder.Entity<DtProperty>(entity =>
            {
                entity.HasKey(e => new { e.DtPropertyId, e.Property })
                    .HasName("pk_DtProperty");

                entity.Property(e => e.DtPropertyId).ValueGeneratedOnAdd();

                entity.Property(e => e.Property).IsUnicode(false);

                entity.Property(e => e.Value).IsUnicode(false);
            });

            //modelBuilder.Entity<ExportCnasAddress>(entity =>
            //{
            //    entity.HasNoKey();
            //});

            //modelBuilder.Entity<NotesChild>(entity =>
            //{
            //    entity.HasNoKey();
            //});

            //modelBuilder.Entity<NotesCnas>(entity =>
            //{
            //    entity.HasKey(e => e.CnasId)
            //        .HasName("pk_CnasId");
            //});

            //modelBuilder.Entity<NotesPerson>(entity =>
            //{
            //    entity.HasKey(e => e.PersonId)
            //        .HasName("pk_PersonId");
            //});

            //modelBuilder.Entity<NotesRegistration>(entity =>
            //{
            //    entity.HasNoKey();
            //});

            modelBuilder.Entity<Person>(entity =>
            {
            });

            modelBuilder.Entity<PurposeOfVisit>(entity =>
            {
                entity.Property(e => e.PurposeOfVisitDesc)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<TimeFrame>(entity =>
            {
                entity.Property(e => e.TimeframeId).ValueGeneratedNever();

                entity.Property(e => e.TimeFrameDesc).IsUnicode(false);
            });

            modelBuilder.Entity<Title>(entity =>
            {
                entity.Property(e => e.TitleId).ValueGeneratedNever();
            });

            modelBuilder.Entity<Vehicle>(entity =>
            {
                entity.Property(e => e.AuditTrail).IsUnicode(false);

                entity.Property(e => e.PermitType).IsUnicode(false);

                entity.Property(e => e.TagIssuer).IsUnicode(false);

                entity.Property(e => e.TagNumber).IsUnicode(false);

                entity.Property(e => e.VehicleColor).IsUnicode(false);

                entity.Property(e => e.VehicleMake).IsUnicode(false);

                entity.Property(e => e.VehicleModel).IsUnicode(false);

                entity.HasOne(d => d.VehicleOwnerNavigation)
                    .WithMany(p => p.Vehicles)
                    .HasForeignKey(d => d.VehicleOwner)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vehicle_Person");
            });

            modelBuilder.Entity<Workgroup>(entity =>
            {
                entity.HasKey(e => e.WorkgroupId)
                    .HasName("pk_Workgroup");

                entity.Property(e => e.AuditTrail).IsUnicode(false);

                entity.Property(e => e.Building).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ViewPersonDisplayName>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("viewPersonDisplayName");
            });

            //modelBuilder.Entity<WorkgroupsOld>(entity =>
            //{
            //    entity.HasKey(e => e.WorkgroupId)
            //        .HasName("PK_Workgroups");

            //    entity.Property(e => e.Workgroup).HasComment("");
            //});

            base.OnModelCreating(modelBuilder);
        }
    }
}
